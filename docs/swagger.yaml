definitions:
  controller.ProductInput:
    properties:
      name:
        type: string
      price:
        type: integer
    type: object
  controller.StoreInput:
    properties:
      city:
        type: string
      name:
        type: string
    type: object
  controller.UserAuth:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controller.UserInput:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Product:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      update_at:
        type: string
    type: object
  models.Store:
    properties:
      city:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      update_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      password:
        type: string
      update_at:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /User:
    get:
      description: getting all data user which includes username n password
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerToken: []
      summary: geting all data user
      tags:
      - User
    patch:
      description: update password user by extracting jwt token
      parameters:
      - description: update password by username
        in: path
        name: username
        required: true
        type: string
      - description: the body to updated password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.UserInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerToken: []
      summary: update data by extracting jwt token
      tags:
      - User
    post:
      description: creating all data user which input username n password
      parameters:
      - description: the body to create new user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.UserInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerToken: []
      summary: creating all data user
      tags:
      - User
  /User/:
    get:
      description: getting data user by extracting jwt token which includes username
        n password
      parameters:
      - description: 'data user by id '
        in: path
        name: id
        required: true
        type: string
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerToken: []
      summary: geting data user by extracting jwt token
      tags:
      - User
  /User/{id}:
    delete:
      description: delete data user by extracting jwt token which includes username
        n password
      parameters:
      - description: 'data user by extracting jwt token '
        in: path
        name: id
        required: true
        type: string
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: delete data user by extracting jwt token
      tags:
      - User
  /login:
    post:
      description: Logging in to get jwt token to access admin or user api by roles.
      parameters:
      - description: the body to login a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.UserAuth'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Login as as user.
      tags:
      - Auth
  /product:
    get:
      description: getting all data product
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: geting all data product
      tags:
      - Product
    post:
      description: creating data Product which input Product name n price
      parameters:
      - description: the body to create new Product
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.ProductInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      security:
      - BearerToken: []
      summary: creating  data Product
      tags:
      - Product
  /product/{id}:
    get:
      description: getting data Product by id
      parameters:
      - description: 'data Product by id '
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: geting data Product by id
      tags:
      - Product
  /product/{name}:
    delete:
      description: delete data Product by name
      parameters:
      - description: 'data Product by name '
        in: path
        name: id
        required: true
        type: string
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: delete data Product by name
      tags:
      - Product
  /product/filters:
    get:
      description: Get filters price product, using query param= "price1" for ">="
        and "price2" for "<="
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: Get filters price product
      tags:
      - Product
  /product/latest:
    get:
      description: Get latest data product
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: Get latest data product
      tags:
      - Product
  /product/newest:
    get:
      description: Get newest data product
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: Get newest data product
      tags:
      - Product
  /product/price/asc:
    get:
      description: Get sort price product by asscending
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: Get sort price product by asscending
      tags:
      - Product
  /product/price/dsc:
    get:
      description: Get sort price product by descending
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: Get sort price product by descending
      tags:
      - Product
  /register:
    post:
      description: registering a user from public access.
      parameters:
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.UserAuth'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Register a user.
      tags:
      - Auth
  /store:
    get:
      description: getting all data store
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Store'
            type: array
      summary: geting all data store
      tags:
      - store
    post:
      description: creating data store which input store name n city
      parameters:
      - description: the body to create new store
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.StoreInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Store'
            type: array
      security:
      - BearerToken: []
      summary: creating  data store
      tags:
      - store
  /store/{name}:
    delete:
      description: delete data store by name
      parameters:
      - description: 'data store by name '
        in: path
        name: id
        required: true
        type: string
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: delete data store by name
      tags:
      - store
  /store/newest:
    get:
      description: Get newest data store
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Store'
            type: array
      summary: Get newest data store
      tags:
      - store
swagger: "2.0"
